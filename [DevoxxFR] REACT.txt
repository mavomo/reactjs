[DevoxxFR] REACT.JS : La partie  ‘V’ du MVC repensée

J’ai assisté (entre autres)  au B.O.F du ParisJS, ma grande première dans cette communauté et au Devoxx France.  Le sujet concernait  React.js, il était présenté par Khalib Jebbari. 
La philosophie du Framework a piqué ma curiosité au vif.  Je l’ai testé  sur des cas basiques et vous propose  une brève présentation.
React.JS : est une librairie JS dédiée aux interfaces graphiques.
React.js (Git Hub :  https://github.com/facebook/react, )  est un Framework dédié à la création d’interface utilisateurs  des applications web et a été mis à la disposition de la communauté courant 2013. Propulsé par Facebook et Instagram,  il se range dans la catégorie V voire C du ‘MVC’
React.js nous amène à remettre en cause l'interaction entre les views et les templates pour la construction des vues.
En fait,  le principe de couplage du View-Model et des templates Handlebar  par exemple n'existe plus.  Il n'y en a que pour les composants! 

Quelques notions clés :
Les composants (component)
	Notion centrale du Framework, les composants (component) sont des blocks HTML réutilisables et modulables. 
Ce sont les briques de HTML et leurs  événements associés que l’on veut pouvoir rajouter au DOM.
Les propriétés : props et state
Les props sont des paramètres passés au composant.  Une fois créés, il n’est pas possible de les modifier sauf si l’on a implémenté un handler  modifiant ces propriétés via la propriété state.
Le type des props peut être spécifié ainsi que la présence ou non du paramètre lors de la création du composant.

DOM Virtuel
React.js utilise un DOM virtuel pour les mises à jour du DOM. Ce mécanisme lui permet d’être très rapide. 
En effet, il maintient une copie du DOM initial et un autre portant les modifications. Dès qu’il détecte un changement sur un nœud, il reconstruit entièrement l’arbre.  Cette opération optimise la régénération du DOM et rend l’affichage du rendu visuel plus rapide.
	
 JSX 
Librairie optionnelle qui permet juste de représenter le contenu du composant sous forme d’arbre dans le DOM virtuel. 
En l’absence de ce dernier, on gérer la logique d’affichage des composants en Javascript.  
Le code ci-dessous montre la différence entre les deux syntaxes.
//Création d’un composant hello world
Avec JXS: 
[Link jsfiddle](http://jsfiddle.net/2UQKF/1/)

Avec le framework  REACT.DOM 
[Link jsfiddle](http://jsfiddle.net/RU4GA/2/)

La méthode render 
Elle contient la logique d’affichage de la vue, l’imbrication des composants sous forme d’arbre à l’intérieur du DOM. On peut y déclarer du HTML, des composants ou un mix des deux.
Cette méthode est appelée quasiment à chaque changement  d’état du composant.

Exemple de composant « mixte» 
Ce composant mixe la création d’un  composant qui contient des composants et du HTML.

Exemple de composant :
[Link jsfiddle](http://jsfiddle.net/e9dFB/17/)

Note :
 
La fonction render retourne à chaque fois l’ensemble de nos composants React sous forme d’arbre qui peuvent ou non être affichée. Dans le cas où l’on utilise JSX ne pouvant renvoyer qu’un seul nœud, il convient, quand cela est nécessaire de regrouper HTML des composants sous un node principal.
Dans le cas de JSX, le commentaire au début du JS est obligatoire. 

Conclusion

Un Framework orienté vue propulsé par Facebook, on se doute qu’il a et aura ses adeptes.
La prise en main est rapide et le dossier d’installation fourni des exemples exhaustifs incluant les cas d’utilisations avec requireJS.

Cependant, j’ai trouvé que React permet au développeur que je suis de  mettre beaucoup de logique dans la vue.  Habituée à séparer la View-model et ses  templates, pouvoir mixer  l’ergonomie de l’application (la création des composants et la manipulation du DOM) et la logique de fonctionnement  (Gestion évènements utilisateurs et mise à jour de l’interface utilisateur voire du model)  au même endroit  me semble un peu …  propice  à l’écriture de code spaghetti .

Il serait néanmoins intéressant de l’intégrer dans une vraie application MVC pour un retour plus complet. 
 Dans ce billet j’ai voulu, comme lors de la session du BOF,  partager sa philosophie qui reste interressante  et son utilisation sur des cas basiques de construction de vues pour les applications web.

Des bonnes pratiques ?

Sur le site officiel du projet,  les développeurs du Framework préconisent entre autres de :
Découper l’ergonomie en composants les plus petits possibles pour faciliter les tests unitaires.
Connaître le workflow minimal de l’application
Identifier les composants sujets à des modifications
Implémenter les fonctions de mises à jour sur ces composants.

La présentation sur React.js de Khalib Jebbari est disponible sur son github : https://github.com/DjebbZ/react-paris-js/blob/master/NOTES.txt


Qui l'utilise ?
-> Facebook/Instagram
-> Khan Academy

Source 
Présentation du Framework : 
http://facebook.github.io/react/index.html

http://code.tutsplus.com/tutorials/intro-to-the-react-framework--net-35660

http://facebook.github.io/react/docs/thinking-in-react.html

http://webdesignporto.com/react-js-in-pure-javascript-facebook-library/


Performance du DOM Virtuel :
 http://calendar.perfplanet.com/2013/diff/


